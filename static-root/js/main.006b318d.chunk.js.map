{"version":3,"sources":["logo.svg","posts/components/components.js","posts/components/lookup.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PostComponent","props","textAreaRef","React","createRef","useState","newPosts","setNewPosts","className","onSubmit","event","preventDefault","newVal","current","value","tempNewPosts","unshift","content","likes","id","ref","required","name","type","PostsList","postsInit","setPostsInit","posts","setPosts","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","send","loadPosts","alert","map","item","index","Post","post","key","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","tweetsEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,kC,+LCIpC,SAASC,EAAcC,GAC1B,IAAMC,EAAcC,IAAMC,YADO,EAEDC,mBAAS,IAFR,mBAE1BC,EAF0B,KAEhBC,EAFgB,KAiBjC,OAAO,yBAAKC,UAAWP,EAAMO,WACzB,yBAAKA,UAAU,eACX,0BAAMC,SAhBO,SAACC,GAClBA,EAAMC,iBACN,IAAMC,EAASV,EAAYW,QAAQC,MAC/BC,EAAY,YAAOT,GAEvBS,EAAaC,QAAQ,CACjBC,QAASL,EACTM,MAAO,EACPC,GAAI,QAERZ,EAAYQ,GAEZb,EAAYW,QAAQC,MAAQ,KAKpB,8BAAUM,IAAKlB,EAAamB,UAAU,EAAMb,UAAU,eAAec,KAAK,SAG1E,4BAAQC,KAAK,UAAUf,UAAU,wBAAjC,WAGR,kBAACgB,EAAD,CAAWlB,SAAUA,KAMtB,SAASkB,EAAUvB,GAAQ,IAAD,EACKI,mBAAS,IADd,mBACtBoB,EADsB,KACXC,EADW,OAEHrB,mBAAS,IAFN,mBAEtBsB,EAFsB,KAEfC,EAFe,KAmB7B,OAhBAC,qBAAU,WACN,IAAMC,EAAQ,YAAI7B,EAAMK,UAAUyB,OAAON,GACrCK,EAAME,SAAWL,EAAMK,QACvBJ,EAASE,KAEd,CAAC7B,EAAMK,SAAUqB,EAAOF,IAC3BI,qBAAU,YC7CP,SAAmBI,GACtB,IAAMC,EAAM,IAAIC,eAIhBD,EAAIE,aADiB,OAErBF,EAAIG,KAJW,MACH,oCAIZH,EAAII,OAAS,WACTL,EAASC,EAAIK,SAAUL,EAAIM,SAE/BN,EAAIO,QAAU,SAAUC,GACpBC,QAAQC,IAAIF,GACZT,EAAS,CAAE,QAAW,4BAA8B,MAExDC,EAAIW,ODuCAC,EAPmB,SAACP,EAAUC,GACX,MAAXA,EACAd,EAAaa,GAEbQ,MAAM,2BAIf,CAACtB,IACG,6BACFE,EAAMqB,KAAI,SAACC,EAAMC,GACd,OAAO,kBAACC,EAAD,CAAMC,KAAMH,EAAMzC,UAAU,sCAAsC6C,IAAG,UAAKH,EAAL,oBAKjF,SAASI,EAAUrD,GAAQ,IACtBmD,EAAiBnD,EAAjBmD,KAAMG,EAAWtD,EAAXsD,OADe,EAEHlD,mBAAS+C,EAAKlC,MAAQkC,EAAKlC,MAAQ,GAFhC,mBAEtBA,EAFsB,KAEfsC,EAFe,OAGGnD,oBAA2B,IAAlB+C,EAAKK,UAHjB,mBAGtBA,EAHsB,KAGZC,EAHY,KAIvBlD,EAAYP,EAAMO,UAAYP,EAAMO,UAAY,yBAChDmD,EAAgBJ,EAAOK,QAAUL,EAAOK,QAAU,SAelDA,EAA0B,SAAhBL,EAAOhC,KAAP,UAA4BL,EAA5B,YAAqCyC,GAAkBA,EACvE,OAAO,4BAAQnD,UAAWA,EAAWqD,QAdjB,SAACnD,GACjBA,EAAMC,iBACc,SAAhB4C,EAAOhC,QACU,IAAbkC,GAEAD,EAAStC,EAAQ,GACjBwC,GAAY,KAEZF,EAAStC,EAAQ,GACjBwC,GAAY,OAKoCE,GAGzD,SAAST,EAAKlD,GAAQ,IACjBmD,EAASnD,EAATmD,KACF5C,EAAYP,EAAMO,UAAYP,EAAMO,UAAY,0BACtD,OAAO,yBAAKA,UAAWA,GACnB,2BAAI4C,EAAKjC,GAAT,MAAgBiC,EAAKnC,SACrB,yBAAKT,UAAU,iBACX,kBAAC8C,EAAD,CAAWF,KAAMA,EAAMG,OAAQ,CAAEhC,KAAM,OAAQqC,QAAS,WACxD,kBAACN,EAAD,CAAWF,KAAMA,EAAMG,OAAQ,CAAEhC,KAAM,SAAUqC,QAAS,YAC1D,kBAACN,EAAD,CAAWF,KAAMA,EAAMG,OAAQ,CAAEhC,KAAM,SAAUqC,QAAS,cEhEvDE,MAxBf,WACE,OACE,yBAAKtD,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKuD,IAAKC,IAAMxD,UAAU,WAAWyD,IAAI,SACzC,mCACO,4CADP,wBAGA,6BACE,kBAACjE,EAAD,OAEF,uBACEQ,UAAU,WACV0D,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCLYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EAAQC,SAASC,eAAe,QAClCF,GACFG,IAASC,OAAO,kBAAC,EAAD,MAASJ,GAE3B,IAAMK,EAAWJ,SAASC,eAAe,aACrCG,GACFF,IAASC,OAAO,kBAAC9E,EAAD,MAAmB+E,GDsH/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.006b318d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from 'react'\n\nimport { loadPosts } from '../components/lookup'\n\nexport function PostComponent(props) {\n    const textAreaRef = React.createRef()\n    const [newPosts, setNewPosts] = useState([])\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newVal = textAreaRef.current.value\n        let tempNewPosts = [...newPosts]\n        // change this to a server side call\n        tempNewPosts.unshift({\n            content: newVal,\n            likes: 0,\n            id: 12313\n        })\n        setNewPosts(tempNewPosts)\n\n        textAreaRef.current.value = ''\n    }\n    return <div className={props.className}>\n        <div className='col-12 mb-3'>\n            <form onSubmit={handleSubmit}>\n                <textarea ref={textAreaRef} required={true} className='form-control' name='post'>\n\n                </textarea>\n                <button type='subbmit' className='btn btn-primary my-3'>Speek</button>\n            </form>\n        </div>\n        <PostsList newPosts={newPosts} />\n    </div>\n}\n\n\n\nexport function PostsList(props) {\n    const [postsInit, setPostsInit] = useState([])\n    const [posts, setPosts] = useState([])\n    useEffect(() => {\n        const final = [...props.newPosts].concat(postsInit)\n        if (final.length !== posts.length) {\n            setPosts(final)\n        }\n    }, [props.newPosts, posts, postsInit])\n    useEffect(() => {\n        const myCallback = (response, status) => {\n            if (status === 200) {\n                setPostsInit(response)\n            } else {\n                alert(\"There was an error\")\n            }\n        }\n        loadPosts(myCallback)\n    }, [postsInit])\n    return <div>\n        {posts.map((item, index) => {\n            return <Post post={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`} />\n        })}\n    </div>\n}\n\nexport function ActionBtn(props) {\n    const { post, action } = props\n    const [likes, setLikes] = useState(post.likes ? post.likes : 0)\n    const [userLike, setUserLike] = useState(post.userLike === true ? true : false)\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n\n    const handleClick = (event) => {\n        event.preventDefault()\n        if (action.type === 'like') {\n            if (userLike === true) {\n                // perhaps i Unlike it?\n                setLikes(likes - 1)\n                setUserLike(false)\n            } else {\n                setLikes(likes + 1)\n                setUserLike(true)\n            }\n        }\n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n    return <button className={className} onClick={handleClick}>{display}</button>\n}\n\nexport function Post(props) {\n    const { post } = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    return <div className={className}>\n        <p>{post.id} - {post.content}</p>\n        <div className='btn btn-group'>\n            <ActionBtn post={post} action={{ type: \"like\", display: \"Likes\" }} />\n            <ActionBtn post={post} action={{ type: \"unlike\", display: \"UnLike\" }} />\n            <ActionBtn post={post} action={{ type: \"repost\", display: \"Repost\" }} />\n        </div>\n    </div>\n}","export function loadPosts(callback) {\n    const xhr = new XMLHttpRequest()\n    const method = 'GET' // \"POST\"\n    const url = \"http://localhost:8000/api/posts/\"\n    const responseType = \"json\"\n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function () {\n        callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e) {\n        console.log(e)\n        callback({ \"message\": \"The request was an error\" }, 400)\n    }\n    xhr.send()\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { PostComponent } from './posts'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <PostComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { PostComponent } from './posts'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n  ReactDOM.render(<App />, appEl);\n}\nconst tweetsEl = document.getElementById(\"speek-app\")\nif (tweetsEl) {\n  ReactDOM.render(<PostComponent />, tweetsEl);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}