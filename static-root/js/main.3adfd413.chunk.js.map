{"version":3,"sources":["logo.svg","lookup/components.js","posts/buttons.js","posts/lookup.js","posts/detail.js","posts/create.js","posts/list.js","posts/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","xhr","XMLHttpRequest","url","responseType","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","setRequestHeader","onload","status","response","detail","window","location","href","onerror","e","console","log","send","ActionBtn","props","post","action","didPerformAction","likes","className","actionDisplay","display","handleBackendActionEvent","type","onClick","event","preventDefault","postId","id","apiPostAction","ParentPost","parent","Post","hideActions","didRepost","useState","actionPost","setActionPost","match","pathname","urlPostId","groups","postid","isDetail","handlePerformAction","newActionPost","content","Fragment","PostCreate","textAreaRef","React","createRef","didPost","handleBackEndUpdate","alert","onSubmit","newVal","current","value","ref","required","PostsList","postsInit","setPostsInit","posts","setPosts","postsDidSet","setPostsDidSet","useEffect","final","newPosts","concat","username","apiPostList","handleDidRepost","newPost","updatePostsInit","unshift","updateFinalPosts","map","item","index","key","PostComponent","setNewPosts","canPost","canpost","tempNewPosts","PostDetailComponent","didLookup","setDidLookup","setPost","handleBackendLookup","apiPostDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","createElement","postsEl","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3adfd413.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = cookies[i].trim();\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nexport function backendLookup(method, endpoint, callback, data) {\n    let jsonData;\n    if (data) {\n        jsonData = JSON.stringify(data)\n    }\n    const xhr = new XMLHttpRequest()\n    const url = `http://localhost:8000/api${endpoint}`\n    xhr.responseType = \"json\"\n    const csrftoken = getCookie('csrftoken');\n    xhr.open(method, url)\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n\n    if (csrftoken) {\n        //xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\n        xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\n    }\n\n    xhr.onload = function () {\n        if (xhr.status === 403) {\n            const detail = xhr.response.detail\n            if (detail === \"Authentication credentials were not provided.\") {\n                window.location.href = \"/login?showLoginRequired=true\"\n            }\n        }\n        callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function (e) {\n        console.log(e)\n        callback({ \"message\": \"The request was an error\" }, 400)\n    }\n    xhr.send(jsonData)\n}","import React from 'react'\n\nimport { apiPostAction } from './lookup'\n\nexport function ActionBtn(props) {\n    const { post, action, didPerformAction } = props\n    const likes = post.likes ? post.likes : 0\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n\n    const handleBackendActionEvent = (response, status) => {\n        console.log(response, status)\n        if ((status === 200 || status === 201) && didPerformAction) {\n            didPerformAction(response, status)\n        }\n    }\n    const handleClick = (event) => {\n        event.preventDefault()\n        apiPostAction(post.id, action.type, handleBackendActionEvent)\n    }\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n    return <button className={className} onClick={handleClick}>{display}</button>\n}","import { backendLookup } from '../lookup'\n\nexport function apiPostCreate(newPost, callback) {\n    backendLookup(\"POST\", \"/posts/create/\", callback, { content: newPost })\n}\n\nexport function apiPostAction(postId, action, callback) {\n    const data = { id: postId, action: action }\n    backendLookup(\"POST\", \"/posts/action/\", callback, data)\n}\n\nexport function apiPostDetail(postId, callback) {\n    backendLookup(\"GET\", `/posts/${postId}/`, callback)\n}\n\nexport function apiPostList(username, callback) {\n    let endpoint = \"/posts/\"\n    if (username) {\n        endpoint = `/posts/?username=${username}`\n    }\n    backendLookup(\"GET\", endpoint, callback)\n}","import React, { useState } from 'react'\n\nimport { ActionBtn } from './buttons'\n\nexport function ParentPost(props) {\n    const { post } = props\n    return post.parent ? <div className='row'>\n        <div className='col-11 mx-auto p-3 border rounded'>\n            <p className='mb-0 text-muted small'>Repost</p>\n            <Post hideActions className={' '} post={post.parent} />\n        </div>\n    </div> : null\n}\n\nexport function Post(props) {\n    const { post, didRepost, hideActions } = props\n    const [actionPost, setActionPost] = useState(props.post ? props.post : null)\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    const path = window.location.pathname\n    const match = path.match(/(?<postid>\\d+)/)\n    const urlPostId = match ? match.groups.postid : -1\n    const isDetail = `${post.id}` === `${urlPostId}`\n\n    const handleLink = (event) => {\n        event.preventDefault()\n        window.location.href = `/${post.id}`\n    }\n\n    const handlePerformAction = (newActionPost, status) => {\n        if (status === 200) {\n            setActionPost(newActionPost)\n        } else if (status === 201) {\n            if (didRepost) {\n                didRepost(newActionPost)\n            }\n        }\n    }\n\n    return <div className={className}>\n        <div>\n            <p>{post.id} - {post.content}</p>\n            <ParentPost post={post} />\n        </div>\n        <div className='btn btn-group'>\n            {(actionPost && hideActions !== true) && <React.Fragment>\n                <ActionBtn post={actionPost} didPerformAction={handlePerformAction} action={{ type: \"like\", display: \"Likes\" }} />\n                <ActionBtn post={actionPost} didPerformAction={handlePerformAction} action={{ type: \"unlike\", display: \"Unlike\" }} />\n                <ActionBtn post={actionPost} didPerformAction={handlePerformAction} action={{ type: \"repost\", display: \"Repost\" }} />\n            </React.Fragment>\n            }\n            {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick={handleLink}>View</button>}\n        </div>\n    </div>\n}","import React from 'react'\n\nimport { apiPostCreate } from './lookup'\n\nexport function PostCreate(props) {\n    const textAreaRef = React.createRef()\n    const { didPost } = props\n    const handleBackEndUpdate = (response, status) => {\n        if (status === 201) {\n            didPost(response)\n        } else {\n            console.log(response)\n            alert(\"An error occured please try again\")\n        }\n    }\n\n    const handleSubmit = (event) => {\n        //backend api request\n        event.preventDefault()\n        const newVal = textAreaRef.current.value\n        // change this to a server side call\n        apiPostCreate(newVal, handleBackEndUpdate)\n        textAreaRef.current.value = ''\n    }\n    return <div className={props.className}>\n        <form onSubmit={handleSubmit}>\n            <textarea ref={textAreaRef} required={true} className='form-control' name='post'>\n\n            </textarea>\n            <button type='subbmit' className='btn btn-primary my-3'>Speek</button>\n        </form>\n    </div>\n}\n","import React, { useEffect, useState } from 'react'\n\nimport { apiPostList } from './lookup'\nimport { Post } from './detail'\n\nexport function PostsList(props) {\n    const [postsInit, setPostsInit] = useState([])\n    const [posts, setPosts] = useState([])\n    const [postsDidSet, setPostsDidSet] = useState(false)\n    useEffect(() => {\n        const final = [...props.newPosts].concat(postsInit)\n        if (final.length !== posts.length) {\n            setPosts(final)\n        }\n    }, [props.newPosts, posts, postsInit])\n    useEffect(() => {\n        if (postsDidSet === false) {\n            const handlePostListLookUp = (response, status) => {\n                if (status === 200) {\n                    setPostsInit(response)\n                    setPostsDidSet(true)\n                } else {\n                    alert(\"There was an error\")\n                }\n            }\n            apiPostList(props.username, handlePostListLookUp)\n        }\n    }, [postsInit, postsDidSet, setPostsDidSet, props.username])\n\n    const handleDidRepost = (newPost) => {\n        const updatePostsInit = [...postsInit]\n        updatePostsInit.unshift(newPost)\n        setPostsInit(updatePostsInit)\n        const updateFinalPosts = [...posts]\n        updateFinalPosts.unshift(posts)\n        setPosts(updateFinalPosts)\n    }\n    return posts.map((item, index) => {\n        return <Post\n            post={item}\n            didRepost={handleDidRepost}\n            className='my-5 py-5 border bg-white text-dark'\n            key={`${index}-{item.id}`} />\n    })\n}","import React, { useEffect, useState } from 'react'\n\nimport { PostCreate } from './create'\nimport { Post } from './detail'\nimport { apiPostDetail } from './lookup'\nimport { PostsList } from './list'\n\n\nexport function PostComponent(props) {\n    const [newPosts, setNewPosts] = useState([])\n    const canPost = props.canpost === \"false\" ? false : true\n    const handleNewPost = (newPost) => {\n        let tempNewPosts = [...newPosts]\n        tempNewPosts.unshift(newPost)\n        setNewPosts(tempNewPosts)\n    }\n    return <div className={props.className}>\n        {canPost === true && <PostCreate didPost={handleNewPost} className='col-12 mb-3' />}\n        <PostsList newPosts={newPosts} {...props} />\n    </div>\n}\n\nexport function PostDetailComponent(props) {\n    const { postId } = props\n    const [didLookup, setDidLookup] = useState(false)\n    const [post, setPost] = useState(null)\n\n    const handleBackendLookup = (response, status) => {\n        if (status === 200) {\n            setPost(response)\n        } else {\n            alert(\"There was an error finding your post.\")\n        }\n    }\n    useEffect(() => {\n        if (didLookup === false) {\n\n            apiPostDetail(postId, handleBackendLookup)\n            setDidLookup(true)\n        }\n    }, [postId, didLookup, setDidLookup])\n\n    return post === null ? null : <Post post={post} className={props.className} />\n}\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { PostComponent } from './posts'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <PostComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { PostComponent, PostDetailComponent } from './posts'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n  ReactDOM.render(<App />, appEl);\n}\nconst e = React.createElement\nconst postsEl = document.getElementById(\"speek-app\")\nif (postsEl) {\n  ReactDOM.render(\n    e(PostComponent, postsEl.dataset), postsEl);\n}\n\nconst postDetailElements = document.querySelectorAll(\".speek-app-detail\")\n\npostDetailElements.forEach(container => {\n  ReactDOM.render(\n    e(PostDetailComponent, container.dataset),\n    container);\n})\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}